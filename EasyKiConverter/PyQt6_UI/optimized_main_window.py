#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‰ºòÂåñÁâàÁé∞‰ª£Âåñ‰∏ªÁ™óÂè£ - ‰øÆÂ§çÂ∏ÉÂ±ÄÈóÆÈ¢ò
ÈááÁî®Ê∏ÖÊô∞ÁöÑ‰∏âÊ†èÂºèÂ∏ÉÂ±ÄÁªìÊûÑ
"""

import sys
from pathlib import Path
from typing import Optional

from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                           QPushButton, QLabel, QFrame, QStackedWidget, QStatusBar,
                           QSplitter, QScrollArea, QGridLayout)
from PyQt6.QtCore import Qt, QPropertyAnimation, QEasingCurve, QPoint, QTimer, pyqtSignal
from PyQt6.QtGui import QColor, QPalette, QLinearGradient, QBrush, QPainter, QFont, QIcon

# ÂØºÂÖ•ÂøÖË¶ÅÁöÑÊ®°Âùó
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
sys.path.insert(0, str(parent_dir))

from utils.config_manager import ConfigManager
from utils.modern_style import ModernStyle, ModernButton, ModernLineEdit
from widgets.optimized_component_input_widget import OptimizedComponentInputWidget
from utils.ui_effects import LoadingSpinner, ModernCard, SuccessAnimation


class OptimizedMainWindow(QMainWindow):
    """‰ºòÂåñÁâàÁé∞‰ª£Âåñ‰∏ªÁ™óÂè£"""
    
    # ‰ø°Âè∑ÂÆö‰πâ
    theme_changed = pyqtSignal(str)
    
    def __init__(self, config_manager: ConfigManager, parent=None):
        super().__init__(parent)
        self.config_manager = config_manager
        self.current_theme = "light"
        self.animation_enabled = True
        
        self.setup_window()
        self.setup_ui()
        self.setup_animations()
        self.setup_connections()
        self.load_settings()
        
    def setup_window(self):
        """ËÆæÁΩÆÁ™óÂè£Â±ûÊÄß"""
        self.setWindowTitle("EasyKiConverter - Áé∞‰ª£ÂåñEDAËΩ¨Êç¢Â∑•ÂÖ∑")
        self.setMinimumSize(1200, 800)
        self.resize(1400, 900)
        
        # ËÆæÁΩÆÁ™óÂè£ÂõæÊ†á
        # self.setWindowIcon(QIcon(":/icons/app_icon.png"))
        
        # ËÆæÁΩÆÁ™óÂè£Â±ûÊÄß
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowSystemMenuHint)
        
    def setup_ui(self):
        """ËÆæÁΩÆÁî®Êà∑ÁïåÈù¢ - ÈááÁî®Ê∏ÖÊô∞ÁöÑ‰∏âÊ†èÂºèÂ∏ÉÂ±Ä"""
        # ÂàõÂª∫‰∏≠Â§ÆÈÉ®‰ª∂
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # ‰∏ªÂ∏ÉÂ±Ä - ÂûÇÁõ¥Â∏ÉÂ±Ä
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # 1. Ê†áÈ¢òÊ†è
        self.title_bar = self.create_title_bar()
        main_layout.addWidget(self.title_bar)
        
        # 2. ‰∏ªÂÜÖÂÆπÂå∫Âüü - Ê∞¥Âπ≥ÂàÜÂâ≤
        content_splitter = QSplitter(Qt.Orientation.Horizontal)
        content_splitter.setHandleWidth(1)
        content_splitter.setStyleSheet("""
            QSplitter::handle {
                background-color: #e2e8f0;
            }
            QSplitter::handle:hover {
                background-color: #cbd5e1;
            }
        """)
        
        # Â∑¶‰æßÂØºËà™Ê†è
        self.sidebar = self.create_sidebar()
        content_splitter.addWidget(self.sidebar)
        
        # ‰∏≠Èó¥‰∏ªÂ∑•‰ΩúÂå∫
        self.main_workspace = self.create_main_workspace()
        content_splitter.addWidget(self.main_workspace)
        
        # Âè≥‰æßËæÖÂä©Èù¢ÊùøÔºàÂèØÈÄâÔºâ
        self.side_panel = self.create_side_panel()
        content_splitter.addWidget(self.side_panel)
        
        # ËÆæÁΩÆÂàÜÂâ≤Âô®ÊØî‰æã
        content_splitter.setSizes([280, 800, 320])
        content_splitter.setStretchFactor(0, 0)  # ÂØºËà™Ê†è‰∏çÊãâ‰º∏
        content_splitter.setStretchFactor(1, 1)  # ‰∏ªÂ∑•‰ΩúÂå∫Êãâ‰º∏
        content_splitter.setStretchFactor(2, 0)  # ËæÖÂä©Èù¢Êùø‰∏çÊãâ‰º∏
        
        main_layout.addWidget(content_splitter)
        
        # 3. Áä∂ÊÄÅÊ†è
        self.status_bar = self.create_status_bar()
        main_layout.addWidget(self.status_bar)
        
        # Â∫îÁî®Ê†∑Âºè
        self.apply_modern_style()
        
    def create_title_bar(self) -> QWidget:
        """ÂàõÂª∫Áé∞‰ª£ÂåñÊ†áÈ¢òÊ†è"""
        title_bar = QWidget()
        title_bar.setFixedHeight(70)
        title_bar.setObjectName("titleBar")
        
        layout = QHBoxLayout(title_bar)
        layout.setContentsMargins(25, 0, 25, 0)
        layout.setSpacing(15)
        
        # Â∫îÁî®ÂõæÊ†á
        app_icon = QLabel("‚ö°")
        app_icon.setObjectName("appIcon")
        app_icon.setStyleSheet("""
            QLabel#appIcon {
                font-size: 28px;
                font-weight: bold;
                color: white;
                background-color: #2563eb;
                border-radius: 14px;
                padding: 10px;
                min-width: 28px;
                min-height: 28px;
                qproperty-alignment: AlignCenter;
            }
        """)
        layout.addWidget(app_icon)
        
        # Â∫îÁî®Ê†áÈ¢ò
        title_container = QWidget()
        title_layout = QVBoxLayout(title_container)
        title_layout.setContentsMargins(0, 0, 0, 0)
        title_layout.setSpacing(2)
        
        app_title = QLabel("EasyKiConverter")
        app_title.setObjectName("appTitle")
        app_title.setStyleSheet("""
            QLabel#appTitle {
                font-size: 20px;
                font-weight: 700;
                color: #1e293b;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }
        """)
        title_layout.addWidget(app_title)
        
        app_subtitle = QLabel("ÂòâÁ´ãÂàõEDAËΩ¨KiCadÂ∑•ÂÖ∑")
        app_subtitle.setStyleSheet("""
            font-size: 12px;
            color: #64748b;
            font-weight: 400;
        """)
        title_layout.addWidget(app_subtitle)
        layout.addWidget(title_container)
        
        layout.addStretch()
        
        # ‰∏ªÈ¢òÂàáÊç¢ÊåâÈíÆ
        self.theme_button = QPushButton("üåô")
        self.theme_button.setObjectName("themeButton")
        self.theme_button.setFixedSize(42, 42)
        self.theme_button.setStyleSheet("""
            QPushButton#themeButton {
                background-color: transparent;
                border: none;
                border-radius: 21px;
                font-size: 20px;
                color: #64748b;
            }
            QPushButton#themeButton:hover {
                background-color: #f1f5f9;
                color: #2563eb;
            }
        """)
        self.theme_button.clicked.connect(self.toggle_theme)
        layout.addWidget(self.theme_button)
        
        # Á™óÂè£ÊéßÂà∂ÊåâÈíÆ
        self.min_button = QPushButton("‚àí")
        self.min_button.setObjectName("windowButton")
        self.min_button.setFixedSize(42, 42)
        self.min_button.clicked.connect(self.showMinimized)
        layout.addWidget(self.min_button)
        
        self.max_button = QPushButton("‚ñ°")
        self.max_button.setObjectName("windowButton")
        self.max_button.setFixedSize(42, 42)
        self.max_button.clicked.connect(self.toggle_maximized)
        layout.addWidget(self.max_button)
        
        self.close_button = QPushButton("√ó")
        self.close_button.setObjectName("windowButton")
        self.close_button.setFixedSize(42, 42)
        self.close_button.clicked.connect(self.close)
        layout.addWidget(self.close_button)
        
        # ËÆæÁΩÆÊ†áÈ¢òÊ†èÊ†∑Âºè
        title_bar.setStyleSheet("""
            QWidget#titleBar {
                background-color: #ffffff;
                border-bottom: 1px solid #e2e8f0;
            }
            QPushButton#windowButton {
                background-color: transparent;
                border: none;
                border-radius: 21px;
                font-size: 18px;
                font-weight: 300;
                color: #64748b;
                min-width: 42px;
                min-height: 42px;
            }
            QPushButton#windowButton:hover {
                background-color: #f1f5f9;
                color: #1e293b;
            }
            QPushButton#windowButton:pressed {
                background-color: #e2e8f0;
            }
            QPushButton#windowButton[text="√ó"]:hover {
                background-color: #ef4444;
                color: white;
            }
        """)
        
        return title_bar
        
    def create_sidebar(self) -> QWidget:
        """ÂàõÂª∫Áé∞‰ª£Âåñ‰æßËæπÊ†è"""
        sidebar = QWidget()
        sidebar.setObjectName("sidebar")
        sidebar.setMinimumWidth(280)
        sidebar.setMaximumWidth(320)
        sidebar.setStyleSheet("""
            QWidget#sidebar {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                                          stop:0 #1e293b, 
                                          stop:1 #334155);
                border-right: none;
            }
        """)
        
        layout = QVBoxLayout(sidebar)
        layout.setContentsMargins(0, 25, 0, 25)
        layout.setSpacing(20)
        
        # LogoÂå∫Âüü
        logo_container = QWidget()
        logo_layout = QVBoxLayout(logo_container)
        logo_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        logo_label = QLabel("‚ö°")
        logo_label.setStyleSheet("""
            color: white;
            font-size: 52px;
            font-weight: bold;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 26px;
            padding: 18px;
            margin: 15px;
            min-width: 52px;
            min-height: 52px;
            qproperty-alignment: AlignCenter;
        """)
        logo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        logo_layout.addWidget(logo_label)
        
        app_name = QLabel("EasyKi\nConverter")
        app_name.setStyleSheet("""
            color: white;
            font-size: 22px;
            font-weight: 600;
            text-align: center;
            background: transparent;
            padding: 12px;
        """)
        app_name.setAlignment(Qt.AlignmentFlag.AlignCenter)
        logo_layout.addWidget(app_name)
        
        layout.addWidget(logo_container)
        
        # ÂØºËà™ËèúÂçï
        nav_container = QWidget()
        nav_layout = QVBoxLayout(nav_container)
        nav_layout.setSpacing(8)
        
        nav_items = [
            ("üè†", "ÂÖÉ‰ª∂ËΩ¨Êç¢", "component"),
            ("üìä", "ËΩ¨Êç¢ÂéÜÂè≤", "history"), 
            ("‚öôÔ∏è", "ËÆæÁΩÆ", "settings"),
            ("‚ÑπÔ∏è", "ÂÖ≥‰∫é", "about")
        ]
        
        self.nav_buttons = {}
        for icon, text, name in nav_items:
            btn = QPushButton(f"{icon}  {text}")
            btn.setObjectName(f"nav_{name}")
            btn.setStyleSheet("""
                QPushButton {
                    background-color: transparent;
                    color: #cbd5e1;
                    border: none;
                    border-radius: 14px;
                    padding: 18px 24px;
                    font-size: 15px;
                    font-weight: 500;
                    text-align: left;
                    margin: 3px 18px;
                }
                QPushButton:hover {
                    background-color: rgba(255, 255, 255, 0.1);
                    color: white;
                }
                QPushButton:pressed {
                    background-color: rgba(255, 255, 255, 0.2);
                }
                QPushButton:checked {
                    background-color: #2563eb;
                    color: white;
                }
            """)
            btn.setCheckable(True)
            btn.clicked.connect(lambda checked, n=name: self.switch_page(n))
            nav_layout.addWidget(btn)
            self.nav_buttons[name] = btn
            
        nav_layout.addStretch()
        layout.addWidget(nav_container)
        
        # Áî®Êà∑‰ø°ÊÅØÂå∫Âüü
        user_container = QWidget()
        user_layout = QHBoxLayout(user_container)
        user_layout.setContentsMargins(20, 15, 20, 15)
        
        user_avatar = QLabel("üë§")
        user_avatar.setStyleSheet("""
            color: white;
            font-size: 22px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 18px;
            padding: 10px;
            min-width: 36px;
            min-height: 36px;
            qproperty-alignment: AlignCenter;
        """)
        user_layout.addWidget(user_avatar)
        
        user_info = QWidget()
        user_info_layout = QVBoxLayout(user_info)
        user_info_layout.setContentsMargins(0, 0, 0, 0)
        user_info_layout.setSpacing(3)
        
        user_name = QLabel("Áî®Êà∑")
        user_name.setStyleSheet("""
            color: white;
            font-size: 15px;
            font-weight: 500;
        """)
        user_info_layout.addWidget(user_name)
        
        user_status = QLabel("Âú®Á∫ø")
        user_status.setStyleSheet("""
            color: #10b981;
            font-size: 13px;
        """)
        user_info_layout.addWidget(user_status)
        
        user_layout.addWidget(user_info)
        user_layout.addStretch()
        
        layout.addWidget(user_container)
        
        return sidebar
        
    def create_main_workspace(self) -> QWidget:
        """ÂàõÂª∫‰∏ªÂ∑•‰ΩúÂå∫"""
        workspace = QWidget()
        workspace.setObjectName("mainWorkspace")
        workspace.setStyleSheet("""
            QWidget#mainWorkspace {
                background-color: #f8fafc;
            }
        """)
        
        layout = QVBoxLayout(workspace)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # ÂàõÂª∫Â†ÜÊ†àÂºèÂÜÖÂÆπÂå∫Âüü
        self.content_stack = QStackedWidget()
        
        # ÂàõÂª∫ÂêÑ‰∏™È°µÈù¢
        self.component_widget = OptimizedComponentInputWidget(self.config_manager)
        self.content_stack.addWidget(self.component_widget)
        
        # Ê∑ªÂä†ÂÖ∂‰ªñÈ°µÈù¢ÁöÑÂç†‰ΩçÁ¨¶
        for i, (title, description) in enumerate([
            ("ËΩ¨Êç¢ÂéÜÂè≤", "Êü•ÁúãÂíåÁÆ°ÁêÜÊÇ®ÁöÑËΩ¨Êç¢ËÆ∞ÂΩï"),
            ("ËÆæÁΩÆ", "ÈÖçÁΩÆÂ∫îÁî®Á®ãÂ∫èÈÄâÈ°π"),
            ("ÂÖ≥‰∫é", "‰∫ÜËß£Â∫îÁî®Á®ãÂ∫è‰ø°ÊÅØ")
        ]):
            placeholder = self.create_placeholder_page(title, description)
            self.content_stack.addWidget(placeholder)
            
        layout.addWidget(self.content_stack)
        
        return workspace
        
    def create_side_panel(self) -> QWidget:
        """ÂàõÂª∫Âè≥‰æßËæÖÂä©Èù¢Êùø"""
        panel = QWidget()
        panel.setObjectName("sidePanel")
        panel.setMinimumWidth(300)
        panel.setMaximumWidth(400)
        panel.setStyleSheet("""
            QWidget#sidePanel {
                background-color: #ffffff;
                border-left: 1px solid #e2e8f0;
            }
        """)
        
        layout = QVBoxLayout(panel)
        layout.setContentsMargins(25, 25, 25, 25)
        layout.setSpacing(20)
        
        # Âø´ÈÄüÊìç‰ΩúÂå∫Âüü
        quick_actions = self.create_quick_actions_card()
        layout.addWidget(quick_actions)
        
        # ÁªüËÆ°‰ø°ÊÅØÂå∫Âüü
        stats_card = self.create_stats_card()
        layout.addWidget(stats_card)
        
        # Â∏ÆÂä©‰ø°ÊÅØÂå∫Âüü
        help_card = self.create_help_card()
        layout.addWidget(help_card)
        
        layout.addStretch()
        
        return panel
        
    def create_placeholder_page(self, title: str, description: str) -> QWidget:
        """ÂàõÂª∫Âç†‰ΩçÁ¨¶È°µÈù¢"""
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(40, 40, 40, 40)
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # ÂõæÊ†á
        icon = QLabel("üöß")
        icon.setStyleSheet("""
            font-size: 64px;
            color: #cbd5e1;
            margin-bottom: 20px;
        """)
        icon.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(icon)
        
        # Ê†áÈ¢ò
        title_label = QLabel(title)
        title_label.setStyleSheet("""
            font-size: 24px;
            font-weight: 600;
            color: #64748b;
            margin-bottom: 10px;
        """)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        # ÊèèËø∞
        desc_label = QLabel(description)
        desc_label.setStyleSheet("""
            font-size: 16px;
            color: #94a3b8;
            text-align: center;
        """)
        desc_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)
        
        layout.addStretch()
        
        return page
        
    def create_quick_actions_card(self) -> QWidget:
        """ÂàõÂª∫Âø´ÈÄüÊìç‰ΩúÂç°Áâá"""
        card = ModernCard(
            title="Âø´ÈÄüÊìç‰Ωú",
            icon="‚ö°",
            description="Â∏∏Áî®ÂäüËÉΩÁöÑÂø´Êç∑ÂÖ•Âè£"
        )
        
        # Ê∑ªÂä†Âø´ÈÄüÊìç‰ΩúÊåâÈíÆ
        actions_layout = QVBoxLayout()
        actions_layout.setSpacing(10)
        
        actions = [
            ("üìã Êñ∞Âª∫ËΩ¨Êç¢", self.new_conversion),
            ("üìÅ ÊâìÂºÄBOM", self.open_bom),
            ("üíæ ‰øùÂ≠òÈ°πÁõÆ", self.save_project),
            ("üîÑ ÊâπÈáèÂ§ÑÁêÜ", self.batch_process)
        ]
        
        for text, callback in actions:
            btn = QPushButton(text)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #f1f5f9;
                    color: #475569;
                    border: 1px solid #e2e8f0;
                    border-radius: 8px;
                    padding: 10px 15px;
                    font-size: 13px;
                    font-weight: 500;
                    text-align: left;
                }
                QPushButton:hover {
                    background-color: #e2e8f0;
                    color: #1e293b;
                }
            """)
            btn.clicked.connect(callback)
            actions_layout.addWidget(btn)
            
        card.layout().addLayout(actions_layout)
        return card
        
    def create_stats_card(self) -> QWidget:
        """ÂàõÂª∫ÁªüËÆ°‰ø°ÊÅØÂç°Áâá"""
        card = ModernCard(
            title="ÁªüËÆ°‰ø°ÊÅØ",
            icon="üìä",
            description="ËΩ¨Êç¢Êï∞ÊçÆÁªüËÆ°"
        )
        
        # Ê∑ªÂä†ÁªüËÆ°‰ø°ÊÅØ
        stats_layout = QVBoxLayout()
        stats_layout.setSpacing(8)
        
        stats = [
            ("ÊÄªËΩ¨Êç¢Ê¨°Êï∞", "0"),
            ("ÊàêÂäüÊ¨°Êï∞", "0"),
            ("Â§±Ë¥•Ê¨°Êï∞", "0"),
            ("Âπ≥ÂùáÁî®Êó∂", "0s")
        ]
        
        for label, value in stats:
            stat_layout = QHBoxLayout()
            stat_label = QLabel(label)
            stat_label.setStyleSheet("color: #64748b; font-size: 12px;")
            stat_value = QLabel(value)
            stat_value.setStyleSheet("color: #1e293b; font-size: 12px; font-weight: 600;")
            
            stat_layout.addWidget(stat_label)
            stat_layout.addStretch()
            stat_layout.addWidget(stat_value)
            stats_layout.addLayout(stat_layout)
            
        card.layout().addLayout(stats_layout)
        return card
        
    def create_help_card(self) -> QWidget:
        """ÂàõÂª∫Â∏ÆÂä©‰ø°ÊÅØÂç°Áâá"""
        card = ModernCard(
            title="‰ΩøÁî®Â∏ÆÂä©",
            icon="‚ùì",
            description="Âø´ÈÄüÂÖ•Èó®ÊåáÂçó"
        )
        
        # Ê∑ªÂä†Â∏ÆÂä©‰ø°ÊÅØ
        help_layout = QVBoxLayout()
        help_layout.setSpacing(8)
        
        help_items = [
            "1. Âú®Â∑¶‰æßËæìÂÖ•ÂÖÉÂô®‰ª∂ÁºñÂè∑",
            "2. ÈÄâÊã©ÈúÄË¶ÅÂØºÂá∫ÁöÑÁ±ªÂûã",
            "3. ËÆæÁΩÆËæìÂá∫ÁõÆÂΩï",
            "4. ÁÇπÂáªÂºÄÂßãËΩ¨Êç¢"
        ]
        
        for item in help_items:
            help_label = QLabel(item)
            help_label.setStyleSheet("color: #64748b; font-size: 12px;")
            help_label.setWordWrap(True)
            help_layout.addWidget(help_label)
            
        card.layout().addLayout(help_layout)
        return card
        
    def create_status_bar(self) -> QWidget:
        """ÂàõÂª∫Áä∂ÊÄÅÊ†è"""
        status_bar = QWidget()
        status_bar.setFixedHeight(50)
        status_bar.setObjectName("statusBar")
        status_bar.setStyleSheet("""
            QWidget#statusBar {
                background-color: #ffffff;
                border-top: 1px solid #e2e8f0;
            }
        """)
        
        layout = QHBoxLayout(status_bar)
        layout.setContentsMargins(25, 0, 25, 0)
        layout.setSpacing(10)
        
        # Áä∂ÊÄÅ‰ø°ÊÅØ
        self.status_label = QLabel("Â∞±Áª™")
        self.status_label.setStyleSheet("""
            color: #64748b;
            font-size: 13px;
            font-weight: 500;
        """)
        layout.addWidget(self.status_label)
        
        layout.addStretch()
        
        # ËøõÂ∫¶Êù°
        self.status_progress = ModernProgressBar()
        self.status_progress.setVisible(False)
        self.status_progress.setFixedWidth(200)
        layout.addWidget(self.status_progress)
        
        return status_bar
        
    def apply_modern_style(self):
        """Â∫îÁî®Áé∞‰ª£ÂåñÊ†∑Âºè"""
        self.setStyleSheet(ModernStyle.get_main_stylesheet(self.current_theme))
        
    def setup_animations(self):
        """ËÆæÁΩÆÂä®ÁîªÊïàÊûú"""
        # È°µÈù¢ÂàáÊç¢Âä®Áîª
        self.page_animation = QPropertyAnimation(self.content_stack, b"pos")
        self.page_animation.setDuration(300)
        self.page_animation.setEasingCurve(QEasingCurve.Type.OutCubic)
        
    def setup_connections(self):
        """ËÆæÁΩÆ‰ø°Âè∑ËøûÊé•"""
        self.theme_button.clicked.connect(self.toggle_theme)
        
    def switch_page(self, page_name: str):
        """ÂàáÊç¢È°µÈù¢"""
        # Êõ¥Êñ∞ÂØºËà™ÊåâÈíÆÁä∂ÊÄÅ
        for name, btn in self.nav_buttons.items():
            btn.setChecked(name == page_name)
        
        # È°µÈù¢Êò†Â∞Ñ
        page_map = {
            "component": 0,
            "history": 1,
            "settings": 2,
            "about": 3
        }
        
        if page_name in page_map:
            index = page_map[page_name]
            self.content_stack.setCurrentIndex(index)
            
            # Êõ¥Êñ∞Áä∂ÊÄÅÊ†è
            page_titles = {
                "component": "ÂÖÉ‰ª∂ËΩ¨Êç¢ - Ê∑ªÂä†ÂíåÁÆ°ÁêÜÂÖÉÂô®‰ª∂",
                "history": "ËΩ¨Êç¢ÂéÜÂè≤ - Êü•ÁúãËΩ¨Êç¢ËÆ∞ÂΩï",
                "settings": "ËÆæÁΩÆ - ÈÖçÁΩÆÂ∫îÁî®Á®ãÂ∫èÈÄâÈ°π",
                "about": "ÂÖ≥‰∫é - ‰∫ÜËß£Â∫îÁî®Á®ãÂ∫è‰ø°ÊÅØ"
            }
            self.status_label.setText(page_titles.get(page_name, "Â∞±Áª™"))
            
    def toggle_theme(self):
        """ÂàáÊç¢‰∏ªÈ¢ò"""
        self.current_theme = "dark" if self.current_theme == "light" else "light"
        self.apply_modern_style()
        
        # Êõ¥Êñ∞‰∏ªÈ¢òÊåâÈíÆÂõæÊ†á
        icon = "‚òÄÔ∏è" if self.current_theme == "dark" else "üåô"
        self.theme_button.setText(icon)
        
        self.theme_changed.emit(self.current_theme)
        
    def toggle_maximized(self):
        """ÂàáÊç¢ÊúÄÂ§ßÂåñÁä∂ÊÄÅ"""
        if self.isMaximized():
            self.showNormal()
            self.max_button.setText("‚ñ°")
        else:
            self.showMaximized()
            self.max_button.setText("‚ùê")
            
    def load_settings(self):
        """Âä†ËΩΩËÆæÁΩÆ"""
        config = self.config_manager.get_config()
        if 'theme' in config:
            self.current_theme = config['theme']
            self.apply_modern_style()
            
    def save_settings(self):
        """‰øùÂ≠òËÆæÁΩÆ"""
        config = self.config_manager.get_config()
        config['theme'] = self.current_theme
        self.config_manager.save_config(config)
        
    # Âø´ÈÄüÊìç‰ΩúÊßΩÂáΩÊï∞
    def new_conversion(self):
        """Êñ∞Âª∫ËΩ¨Êç¢"""
        self.switch_page("component")
        self.status_label.setText("üÜï Êñ∞Âª∫ËΩ¨Êç¢‰ªªÂä°")
        
    def open_bom(self):
        """ÊâìÂºÄBOMÊñá‰ª∂"""
        self.status_label.setText("üìÅ ÈÄâÊã©BOMÊñá‰ª∂...")
        
    def save_project(self):
        """‰øùÂ≠òÈ°πÁõÆ"""
        self.status_label.setText("üíæ È°πÁõÆ‰øùÂ≠òÊàêÂäü")
        
    def batch_process(self):
        """ÊâπÈáèÂ§ÑÁêÜ"""
        self.status_label.setText("üîÑ ÊâπÈáèÂ§ÑÁêÜÊ®°Âºè")
        
    def mousePressEvent(self, event):
        """Èº†Ê†áÊåâ‰∏ã‰∫ã‰ª∂ÔºàÁî®‰∫éÁ™óÂè£ÊãñÂä®Ôºâ"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.drag_position = event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            event.accept()
            
    def mouseMoveEvent(self, event):
        """Èº†Ê†áÁßªÂä®‰∫ã‰ª∂ÔºàÁî®‰∫éÁ™óÂè£ÊãñÂä®Ôºâ"""
        if event.buttons() == Qt.MouseButton.LeftButton and hasattr(self, 'drag_position'):
            self.move(event.globalPosition().toPoint() - self.drag_position)
            event.accept()


# ÂØºÂÖ•ËøõÂ∫¶Êù°ÁªÑ‰ª∂
from utils.ui_effects import ModernProgressBar